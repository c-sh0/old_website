# sshtool.subr
#
# Wed Aug  8 16:55:12 CDT 2012
#
#   "Just Another SSH Tool" (sshtool) 
#
# sshtool.subr -  config/subroutines for sshtool parent script
#
#
trap trap_cleanup 1 2 3 4 5 6 7 8 11 13 14 15

#-- paths --#
export PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin

#-- set some defaults, set overrides in parent script --#
verbose=${verbose:-0}

os_type=${os_type:-`uname -s`}
ssh_username=${ssh_username:-`whoami`}
ssh_cmd=${ssh_cmd:-'/usr/bin/ssh'}
scp_cmd=${scp_cmd:-'/usr/bin/scp'}
mkfifo_cmd=${mkfifo_cmd:-'/usr/bin/mkfifo'}

base_dir=${base_dir:-`pwd`}
run_dir=${run_dir:-"${base_dir}/.tmp"}
ssh_opts=${ssh_opts:-"${base_dir}/ssh.options"}
setsid_cmd=${setsid_cmd:-"${base_dir}/setsid"}
host_list_dir=${host_list_dir:-"${base_dir}/hostgroups"}
control_path=${control_path:-"${run_dir}/ssh-%r-%h-%p.sock"}

usage() { 
cat << _END_

---------------------------------------------------------------
              Just Another SSH Tool 
---------------------------------------------------------------

Usage: ${0} [-u username] [option] [-v] [hostgroup]

    -u     :- set login username (default: user running this script)

    -sh    :- log into each host in [hostgroup]
    -rsh   :- log into each host then start root shell (requires sudo on remote host) (*) 
 
    -cp    :- copy file or directory to each host in [hostgroup]
    -cmd   :- run command(s) on each host in [hostgroup] as normal user
    
    -o     :- open multiplex connections for each host in [hostgroup]
              (keep connections active and exit) 

    -l     :- list hosts in [hostgroup]
    -v     :- make some noise
    -h     :- what your looking at

 (*) See: README for more information

_END_

echo "[hostgroup]:${host_list_dir}/"

 if [ ! -z ${host_list_dir} ] && [ -d ${host_list_dir} ]; then
   echo
   for name in `ls ${host_list_dir}`; do
      printf "\t${name}\t:- `grep '^# Description' ${host_list_dir}/${name} | head -1 | cut -d: -f2`\n"
   done
 fi
 echo
 
 exit 3 
} 

parse_cmd_args() { 
  [ "$#" -eq 0 ] && usage
  
  _hosts_login=0 
  _hosts_login_root_shell=0 
  _cpy_to_hosts=0 
  _exec_hosts=0 
  _open_conns=0
  _list_hosts=0 
 
  _arg_count=0
  while [ "$#" -gt "0" ]; do
    case $1 in
      
           -u) shift
               ssh_username=${1}
            ;;

           -sh) shift
                host_list=${1}
                _hosts_login=1
                _arg_count=$(($_arg_count+1))
            ;;
           -rsh) shift 
                 host_list=${1}
                 _hosts_login_root_shell=1 
                 _arg_count=$(($_arg_count+1))
            ;;

           -cp) shift
                host_list=${1}
                _cpy_to_hosts=1
                _arg_count=$(($_arg_count+1))
            ;;

           -cmd) shift
                 host_list=${1}
                 _exec_hosts=1
                _arg_count=$(($_arg_count+1))
            ;;
           
           -o)  shift 
                host_list=${1}
                _open_conns=1 
                _arg_count=$(($_arg_count+1))
             ;;

           -l)  shift 
                host_list=${1}
                _list_hosts=1 
                _arg_count=$(($_arg_count+1))
            ;; 
               
           -v)   verbose=1 ;;
           -h|*) usage ;;
     esac
    shift
  done
  
   [ ${_arg_count} -ne 1 ] && usage 
   [ ! -f "${host_list_dir}/${host_list}" ] && usage  

 return 1
} 


#-- set/check all variables & files needed to run etc.. --# 
init_session() { 
      verbose_msg "int_session: START..."
      rm -rf ${run_dir}
     
      host_list_name="${1}"
      hostlist_file="${host_list_dir}/${host_list_name}" 
      verbose_msg "hostlist_file: ${hostlist_file}"
      [ ! -f ${hostlist_file} ] && error_exit "missing hostlist or NOT specified, check dir: ${host_list_dir}!" 
      verbose_msg "Hostlist set: ${host_list_name}" 1

      if mkdir -m 700 -p ${run_dir} 2> /dev/null ; then 
           verbose_msg "mkdir: ${run_dir} - OK"           
       else 
          error_exit "unable to create: ${run_dir}!"
      fi 
      
      if [ ${askpass_cmd=`mktemp ${run_dir}/ssh_askpw.XXXXXX 2> /dev/null`} ]; then
           verbose_msg "mktemp: ${askpass_cmd} - OK"
      else 
           error_exit "mktemp, unable to create: ${askpass_cmd}!"
      fi 
            
      askpass_fifo="${askpass_cmd}.fifo"
      if mkfifo -m 600 ${askpass_fifo} 2> /dev/null ; then
           verbose_msg "mkfifo: ${askpass_fifo} - OK"
      else 
           error_exit "mkfifo, unable to create: ${askpass_fifo}!"
      fi 
      
      if [ ${hosts_run_f=`mktemp ${run_dir}/hosts.XXXXXXXX 2> /dev/null`} ]; then 
           verbose_msg "mktemp: ${hosts_run_f} - OK"
           strings ${hostlist_file} | grep -v '#' > ${hosts_run_f}
      else
           error_exit "mktemp, unable to create: ${hosts_run_f}!"
      fi

	cat <<- _END_ > ${askpass_cmd}
	#!/bin/sh
	head -1 ${askpass_fifo}
	_END_

     chmod 500 ${askpass_cmd}

     # check username (alpha numeric?)
     _res="$(echo ${ssh_username} | sed -e '/[^[:alnum:]]/d')"
     [ -z ${_res} ] && error_exit "ssh_username, ${ssh_username} is not alppha numeric!"

      
     verbose_msg "ssh options file: ${ssh_opts}" 
     [ ! -f ${ssh_opts} ] && error_exit "missing ssh options file, ${ssh_opts}!"

        #-- set master slave configs. sorta cosmetic, so ps output doesn't look so ugly --# 
        conn_master_config=${conn_master_config:-"${run_dir}/ssh-m.config"}
        conn_slave_config=${conn_slave_config:-"${run_dir}/ssh-s.config"}
       
	cat <<- _END_ > ${conn_master_config}
	User ${ssh_username}
	ControlMaster yes
	ControlPath ${control_path}
	_END_

	cat ${ssh_opts} >> ${conn_master_config}
        chmod 600 ${conn_master_config}
        verbose_msg "master ssh config set: ${conn_master_config}" 

	cat <<- _END_ > ${conn_slave_config}
	User ${ssh_username}
	ControlMaster no
	ControlPath ${control_path}
	_END_

	cat ${ssh_opts} >> ${conn_slave_config}
        chmod 600 ${conn_slave_config}
        verbose_msg "slave ssh config set: ${conn_slave_config}" 


     read_sshpasswd    # prompt for ssh password
     open_sshconns     # open master ssh connections to hosts  
     

 verbose_msg "int_session: END"
 return 1
} 

#-- get sshpassword from user --#
read_sshpasswd() {
   verbose_msg "Username: ${ssh_username}" 1
   
   if [ ${verbose} = 1 ]; then 
     printf "INFO :- Enter SSH Password: "
   else  
     printf "Enter SSH Password: "
   fi 

   stty -echo
   read ssh_passwd
   stty echo
   echo ""
   
   # ** ?? verify password stuff ?? #
 
 return 1
}


#-- write ssh password to askpass_fifo --#
_sshwrpw() {
	while [ -p ${askpass_fifo} ]; do
		cat <<- _END_ >> ${askpass_fifo}
		${ssh_passwd}
		_END_
	done
 return 1
}


open_sshconns() {
      verbose_msg "opening master ssh host connections for ${host_list_name} hosts"

      export SSH_ASKPASS=${askpass_cmd}
      export DISPLAY="NOT_NULL"

      _sshwrpw & 
      SSHWRPW_PID=$!
   
      _host_failed=0 
      verbose_msg "Connecting, Please wait..." 2 
      for _host in `cat ${hosts_run_f}`; do
             [ ${verbose} = 0 ] && echo -n ".."
          
             # checks host is responding and add to failed list #
             _failed_hosts="${hosts_run_f}.failed" 
             _ping_host ${_host} 
             if [ $? -gt 0 ]; then 
                  verbose_msg "*** no response from: ${_host}, skipping..."
                  echo "${_host}" >> ${_failed_hosts} 
                  _host_failed=$(($_host_failed+1))
                 continue
             fi 
              
             verbose_msg "Opening connection to: ${_host}"

             # master chann connect to host 
             ${setsid_cmd} ${ssh_cmd} -MNfF ${conn_master_config} ${_host}
 
             # check that we have a connection 
             ${ssh_cmd} -F ${conn_slave_config} -O check ${_host} > /dev/null 2>&1
             [ $? -gt 0 ] && _host_failed=$(($_host_failed+1)) && echo "${_host}" >> ${_failed_hosts}
   
      done 
      verbose_msg ".Done" 2; verbose_msg "!" 1
      end_sshwrpw  # - kill _sshwrpw
 

      #-- prompt to continue skipping failed hosts ? --# 
      if [ ${_host_failed} -ne 0 ]; then 

             verbose_msg "\n++++++++++++++++++++++++++++++++++++++++++++" 1
             verbose_msg "  !!!! FAILED HOST CONNECTION LIST !!!!!!"  1
             verbose_msg "++++++++++++++++++++++++++++++++++++++++++++\n" 1
             for _host in `cat ${_failed_hosts}`; do
                verbose_msg "${_host}" 1
             done 
             verbose_msg "\n++++++++ NUM Failed: ${_host_failed} +++++++\n" 1
              
             _prompt="Continue (y/n)? "
             [ ${verbose} = 1 ] && _prompt="INFO :- ${_prompt}"

             printf "${_prompt}"         
             while read _answer; do 
                  case ${_answer} in 
                       Y|y) 
                              #- removed failed hosts from $hosts_run_f -# 
                              verbose_msg "Yes, continuing excluding failed hosts..." 1
                              _tmp_f=${hosts_run_f}.$$
                              grep -v -f ${_failed_hosts} ${hosts_run_f} > ${_tmp_f} 
                              mv ${_tmp_f} ${hosts_run_f}

                          break 
                        ;;

                       N|n) 
                           verbose_msg "No, shutting down..." 1
                           cleanup
                          exit 255 
                        ;;

                       *) 
                          printf "${_prompt}"         
                         continue 
                        ;;
                  esac
             done  
      fi 

 return 1
}

read_src_files() { 
     printf "Source file or directory?: "
     read _f_src
     [ -z ${_f_src} ] && error_exit "Nothing to send!" 

     if [ ! -d ${_f_src} ] && [ ! -f ${_f_src} ]; then
           error_exit "File: \"${_f_src}\", not found!" 
     fi

     echo -n "Destination location?: "
     read _f_dst
     [ -z ${_f_dst} ] && error_exit "Empty remote location!"

 return 1
} 


cpy_to_hosts() { 

      for _host in `cat ${hosts_run_f}`; do

          #-- check status of master connection --#
          ${ssh_cmd} -F ${conn_slave_config} -O check ${_host} > /dev/null 2>&1
          if [ $? -gt 0 ]; then
             verbose_msg "Connection CLOSED or NOT Found: ${_host}!" 3
             sleep 3
             continue
          fi
        
          #-- Send files  --#
          verbose_msg "Sending ${_f_src} to ${_host}:${_f_dst}..." 1
          ${scp_cmd} -F ${conn_slave_config} -oLogLevel=VERBOSE -r ${_f_src} ${_host}:${_f_dst}
          
          #-- shutdown master connection --# 
          ${ssh_cmd} -F ${conn_slave_config} -O exit ${_host} > /dev/null 2>&1
 
      done  

 return 1
} 

exec_on_hosts() { 

     #-- read commands, may move this outta here --#
     _cmds_file=`mktemp ${run_dir}/exec_cmds.XXXXXX`
     if [ -z ${_cmds_file} ] || [ ! -f ${_cmds_file} ]; then
            error_exit "Cannot create commands file in ${run_dir}!" 3 
     fi

     verbose_msg "Enter commands, (ENTER to end)" 
     cmd_count=1
     while [ true ]; do

         printf "Command (${cmd_count}): "
         read cmds
         [ "${cmds}" = "" ] && break

         echo ${cmds} >> ${_cmds_file}
         cmd_count=$(($cmd_count+1))

     done
     verbose_msg "Got it, Thanks!!"

     verbose_msg "Command file: cmds_file -> ${_cmds_file}"
     
     for _host in `cat ${hosts_run_f}`; do

          #-- check status of master connection --#
          ${ssh_cmd} -F ${conn_slave_config} -O check ${_host} > /dev/null 2>&1
          if [ $? -gt 0 ]; then
              verbose_msg "Connection CLOSED or NOT Found: ${_host}!" 3
             sleep 3
             continue
          fi
      
          #-- execute on host --# 
          verbose_msg "Executing commands on: ${_host}..." 1  
          cat ${_cmds_file} | ${ssh_cmd} -F ${conn_slave_config} ${_host} sh
            
          #-- shutdown master connection --#
          ${ssh_cmd} -F ${conn_slave_config} -O exit ${_host} > /dev/null 2>&1
          
          verbose_msg "" 1
      done 

 return 1
} 


ssh_root_shell() { 
        if [ ${dot_login=`mktemp ${run_dir}/dot_login.XXXXXX 2> /dev/null`} ]; then
               verbose_msg "mktemp: ${dot_login} - OK"
        else
               error_exit "mktemp, unable to create: ${dot_login}!"
        fi

	# --- !! Tested ~/.login w/ csh shell !! -- #
	cat <<- _END_ > ${dot_login}
	# created by sshtool 
	# these files *should* self destruct at login 
	#
	# - get realpath -> set home_dir=\`/usr/bin/readlink -f ~/\`
	set DONT_ASK='~/.dont_ask'
	set DOT_LOGIN='~/.login'
	
	/bin/rm -rf \${DONT_ASK} \${DOT_LOGIN}
	
	/bin/cat > \${DONT_ASK} <<_NO_ASK_
	#!/bin/sh
	/bin/echo '${ssh_passwd}'
	_NO_ASK_
	
	/bin/cat > ~/.logout <<_NO_ASK_
	/bin/rm -rf \${DONT_ASK} \${DOT_LOGIN}
	/usr/local/bin/sudo -k
	_NO_ASK_
	
	/bin/chmod 700 \${DONT_ASK}
	
	if ( -x \${DONT_ASK} ) then
    	setenv SUDO_ASKPASS \${DONT_ASK}
    	/usr/local/bin/sudo -A /bin/rm -rf \${DONT_ASK} \${DOT_LOGIN}
    	/usr/local/bin/sudo /usr/bin/su -
	endif

	_END_

        for _host in `cat ${hosts_run_f}`; do

          #-- check status of master connection --#
          ${ssh_cmd} -F ${conn_slave_config} -O check ${_host} > /dev/null 2>&1
          if [ $? -gt 0 ]; then
             verbose_msg "Connection CLOSED or NOT Found: ${_host}!" 3
             sleep 3
             continue
          fi

          #-- Send files  --#
          verbose_msg "Sending .login to ${_host}:~/.login ..." 1
          ${scp_cmd} -F ${conn_slave_config} -oLogLevel=VERBOSE -r ${dot_login} ${_host}:~/.login

        done

        # -- login to each host -- # 
        ssh_to_hosts

 return 1
} 

ssh_to_hosts() { 
       for _host in `cat ${hosts_run_f}`; do
          verbose_msg "\nLogging into: ${_host}\n" 1

          #-- check status of master connection --#
          ${ssh_cmd} -F ${conn_slave_config} -O check ${_host} > /dev/null 2>&1
          if [ $? -gt 0 ]; then
             verbose_msg "Connection CLOSED or NOT Found: ${_host}!" 3
             sleep 3
             continue
          fi

          #-- Login --# 
          ${ssh_cmd} -F ${conn_slave_config} ${_host}
           

          #-- shutdown master connection --# 
          ${ssh_cmd} -F ${conn_slave_config} -O exit ${_host} > /dev/null 2>&1
 
       done 

 return 1
} 

close_sshconns() { 
        verbose_msg "closing master ssh connections..."     
        
        if [ ! -z ${hosts_run_f} ] && [ -f ${hosts_run_f} ]; then
            for _host in `cat ${hosts_run_f}`; do
                verbose_msg "Shutting down connection to host: ${_host}"  
               
                #-- check status of master connection --#
                ${ssh_cmd} -F ${conn_slave_config} -O check ${_host} > /dev/null 2>&1
                if [ $? -gt 0 ]; then 
                  verbose_msg "Connection CLOSED or NOT Found: ${_host}" 
                  continue
                fi 

                #-- shutdown master connection --#
                ${ssh_cmd} -F ${conn_slave_config} -O exit ${_host} > /dev/null 2>&1

            done 
        fi 

 return 1
} 

_ping_host() {
  
   case ${os_type} in
      Linux)
         _popts="-q -w 2 -c 1"
       ;;
      FreeBSD)
          _popts="-q -W 2 -c 1"
       ;;
       *) 
          _popts="-q -c 1"
       ;;
   esac

   verbose_msg "checking to see if host ${1} is alive..." 
   ping ${_popts} ${1} > /dev/null 2>&1

 return $?
}

verbose_msg() { 
   #date=`date "+%m/%d/%Y %H:%M:%S"`
 
  if [ ${verbose} = 1 ]; then 
     printf "INFO :- ${1}\n"  
   return 1
  fi
  
  # {1,2,3} = Type 
  case ${2} in 
      1) printf "${1}\n" && return 1 ;;  
      2) printf "${1}"   && return 1 ;;    
      3) printf "ERROR :- ${1}\n" && return 1 ;;    
      *) return 1 ;;
  esac  
} 


end_sshwrpw() {
   if [ -n "${SSHWRPW_PID}" ]; then
       verbose_msg "killing sshwrpw() process, " 2; verbose_msg "\n" 2
       kill -15 ${SSHWRPW_PID} 
       cat ${askpass_fifo} >/dev/null  # necessary for the process to actually end
   fi
   SSHWRPW_PID=""
   echo 
 return 1
}

error_exit() { 
   verbose_msg "${1}" 3  
   cleanup
 exit 255
} 

cleanup() { 
    end_sshwrpw
    close_sshconns
    verbose_msg "Cleaning up..." 1
    rm -f ${askpass_cmd} ${askpass_fifo}
    rm -rf ${run_dir}
} 

trap_cleanup() { 
    printf "\n"
    verbose_msg "TRAP SIG Received, Exiting!"  
    cleanup
 exit 255 
} 
